<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Programming Pedagogy</title><link>https://jnormile.github.io/research-notebook/posts/</link><description>Recent content in Posts on Programming Pedagogy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Feb 2023 07:05:03 -0500</lastBuildDate><atom:link href="https://jnormile.github.io/research-notebook/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Scarce</title><link>https://jnormile.github.io/research-notebook/posts/missing/</link><pubDate>Tue, 21 Feb 2023 07:05:03 -0500</pubDate><guid>https://jnormile.github.io/research-notebook/posts/missing/</guid><description>The research I&amp;rsquo;ve reviewed here thus far has been a little on the dated side, with one text from 2009 and another from 2014. To remedy this, I&amp;rsquo;ve recently looked at &amp;ldquo;The Effectiveness of Gamification in Programming Education: Evidence from a Meta-Analysis&amp;rdquo;, a 2022 literature review on gamification approaches as they specifically apply to teaching programming. The review examines 21 texts and synthesizes some of the emergent themes regarding the intersection of gamification, education, and computer science.</description></item><item><title>Keywords</title><link>https://jnormile.github.io/research-notebook/posts/keywords/</link><pubDate>Tue, 07 Feb 2023 10:07:03 -0500</pubDate><guid>https://jnormile.github.io/research-notebook/posts/keywords/</guid><description>For transparency&amp;rsquo;s sake, as I continue to plumb the depths of the already discovered (in terms of academic scholarship) I&amp;rsquo;ve opted to share the keywords that are guiding my exploration. The below list is constantly in a state of flux, but the research I&amp;rsquo;m locating has been found by using some combination of the following words and phrases:
Pedagogy Curriculum Education Learning Comprehension Retention Computer science Gamification Programming language Rust</description></item><item><title>Gamification</title><link>https://jnormile.github.io/research-notebook/posts/gamification/</link><pubDate>Fri, 03 Feb 2023 12:07:03 -0500</pubDate><guid>https://jnormile.github.io/research-notebook/posts/gamification/</guid><description>In my last post I was left mulling over a lingering question from a 2008 study on dynamic media and its impact on learning. The study found, you may recall, that complicated subject matter benefitted more from having learning media that was &amp;ldquo;dynamic&amp;rdquo; in nature. The definition of &amp;ldquo;dynamic&amp;rdquo; media was restricted to animated visuals for that study, and I found myself wondering: how much more might complicated learning matter benefit from learning material that was even more dynamic than that?</description></item><item><title>Dynamic</title><link>https://jnormile.github.io/research-notebook/posts/dynamic/</link><pubDate>Thu, 02 Feb 2023 12:07:03 -0500</pubDate><guid>https://jnormile.github.io/research-notebook/posts/dynamic/</guid><description>If there&amp;rsquo;s one thing clear from my last post, it&amp;rsquo;s that I firmly believe that the learning process can be a deeply engaging process&amp;hellip;if it&amp;rsquo;s approached the right way.
The type of learning I discussed last time was a tangible, hands-on approach. Learning by doing, so to speak: writing code, tackling stack traces, and seeking out the guidance of those who programmed before. This type of work was dynamic; constantly changing, and made up of energy and force, per our friends at Merriam-Webster.</description></item><item><title>Questions</title><link>https://jnormile.github.io/research-notebook/posts/questions/</link><pubDate>Wed, 01 Feb 2023 12:07:03 -0500</pubDate><guid>https://jnormile.github.io/research-notebook/posts/questions/</guid><description>How do we effectively teach entirely new ways of thinking&amp;ndash;like teaching someone who&amp;rsquo;s never seen a terminal window to write their first few lines of code? What practices and behaviors are useful for meaningfully maximizing our time spent grappling with and learning a complex concept&amp;ndash;like a heady algorithm that seems all but impenetrable at first glance?
Questions like these drive my research into pedagogy as it pertains to the science and art of programming, a craft that&amp;rsquo;s quickly become very personal for me.</description></item><item><title>Hello</title><link>https://jnormile.github.io/research-notebook/posts/hello/</link><pubDate>Tue, 31 Jan 2023 12:07:03 -0500</pubDate><guid>https://jnormile.github.io/research-notebook/posts/hello/</guid><description>My name is Jeff Normile and I&amp;rsquo;m a student at Allegheny College pursuing an education in both Computer Science and Communications.
As can be inferred from the sidebar, I have a particular interest in the way we learn. I think it behooves any student to think critically about the ways in which they process and synthesize new information into usable, actionable knowledge, though this feels especially important for myself: after a decade in the workforce I decided to pivot and make the return to academia, so coming from a decade of my time being money has led me to constantly evaluate the value of my time in the classroom.</description></item></channel></rss>